// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'helper/models/anime_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7367005403000880625),
      name: 'AnimeModel',
      lastPropertyId: const IdUid(7, 2728967476925014044),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8796504150628432932),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 2824869118085823400),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 283857313078018381),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7933586034001549577),
            name: 'lastSeenDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1811430557039642407),
            name: 'episodeStr',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2728967476925014044),
            name: 'lastSeenEpisodeIndex',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 3401344935020428400),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [3401344935020428400],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        1149042925376943734,
        322387449241256596,
        2654837639630957822,
        6467075612372084263
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AnimeModel: EntityDefinition<AnimeModel>(
        model: _entities[0],
        toOneRelations: (AnimeModel object) => [],
        toManyRelations: (AnimeModel object) => {},
        getId: (AnimeModel object) => object.id,
        setId: (AnimeModel object, int id) {
          object.id = id;
        },
        objectToFB: (AnimeModel object, fb.Builder fbb) {
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          final episodeStrOffset = fbb.writeString(object.episodeStr);
          fbb.startTable(8);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, imageUrlOffset);
          fbb.addInt64(4, object.lastSeenDate?.millisecondsSinceEpoch);
          fbb.addOffset(5, episodeStrOffset);
          fbb.addInt64(6, object.lastSeenEpisodeIndex);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastSeenDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = AnimeModel()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..title = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..imageUrl = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..lastSeenDate = lastSeenDateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(lastSeenDateValue)
            ..episodeStr = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..lastSeenEpisodeIndex = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 16);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AnimeModel] entity fields to define ObjectBox queries.
class AnimeModel_ {
  /// see [AnimeModel.id]
  static final id =
      QueryIntegerProperty<AnimeModel>(_entities[0].properties[0]);

  /// see [AnimeModel.title]
  static final title =
      QueryStringProperty<AnimeModel>(_entities[0].properties[1]);

  /// see [AnimeModel.imageUrl]
  static final imageUrl =
      QueryStringProperty<AnimeModel>(_entities[0].properties[2]);

  /// see [AnimeModel.lastSeenDate]
  static final lastSeenDate =
      QueryIntegerProperty<AnimeModel>(_entities[0].properties[3]);

  /// see [AnimeModel.episodeStr]
  static final episodeStr =
      QueryStringProperty<AnimeModel>(_entities[0].properties[4]);

  /// see [AnimeModel.lastSeenEpisodeIndex]
  static final lastSeenEpisodeIndex =
      QueryIntegerProperty<AnimeModel>(_entities[0].properties[5]);
}
